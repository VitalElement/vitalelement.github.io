<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Daniel Walmsley | VitalElement</title>
	<atom:link href="/author/dan/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Embedded Systems Design and Tools</description>
	<lastBuildDate>Sat, 03 Mar 2018 12:05:28 +0000</lastBuildDate>
	<language>en-GB</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.9.4</generator>
	<item>
		<title>Introduction to MVVM</title>
		<link>/2018/03/02/introduction-to-mvvm/</link>
		<pubDate>Fri, 02 Mar 2018 17:40:59 +0000</pubDate>
		<dc:creator><![CDATA[Daniel Walmsley]]></dc:creator>
				<category><![CDATA[Uncategorised]]></category>

		<guid isPermaLink="false">/?p=257</guid>
		<description><![CDATA[]]></description>
				<content:encoded><![CDATA[<div class="et_pb_section et_pb_section_0 et_section_regular">
				
				
				
				
					<div class=" et_pb_row et_pb_row_0">
				<div class="et_pb_column et_pb_column_4_4  et_pb_column_0 et_pb_css_mix_blend_mode_passthrough et-last-child">
				
				
				<div class="et_pb_text et_pb_module et_pb_bg_layout_light et_pb_text_align_left  et_pb_text_0">
				
				
				<div class="et_pb_text_inner">
					<p><em>MVVM</em> stands for <strong>M</strong>odel <strong>V</strong>iew <strong>V</strong>iew<strong>M</strong>odel it is a design pattern for UI applications. It has predominantly been used for XAML (e<strong>X</strong>tensible <strong>A</strong>pplication <strong>M</strong>arkup <strong>L</strong>anguage) based frameworks such as WPF, Silverlight, UWP, Xamarin and now Avalonia.</p>
<p>In early UI applications the UI logic and the buisness logic of the application were easily mixed. This leads to code that is difficult to test and eventually become difficult to maintain. Making changes to UI code can break the application in other areas.</p>
<p>The MVVM pattern ensures seperation of concerns within a UI application to ensure testability and maintainability.</p>
<p>MVVM is no longer restricted to just .NET and XAML based applications and is starting to be adopted in various guises on other technologies.</p>
<p>MVVM separates the various aspects of the UI application into 3 layers as show below.</p>
				</div>
			</div> <!-- .et_pb_text -->
			</div> <!-- .et_pb_column -->
				
				
			</div> <!-- .et_pb_row --><div class=" et_pb_row et_pb_row_1">
				<div class="et_pb_column et_pb_column_4_4  et_pb_column_1 et_pb_css_mix_blend_mode_passthrough et-last-child">
				
				
				<div class="et_pb_module et_pb_image et-waypoint et_animated et_pb_image_0 et_always_center_on_mobile et_pb_image_sticky">
				
				
				<span class="et_pb_image_wrap"><img src="/wp-content/uploads/2018/03/MVVM.png" alt="" /></span>
			</div><div class="et_pb_text et_pb_module et_pb_bg_layout_light et_pb_text_align_left  et_pb_text_1">
				
				
				<div class="et_pb_text_inner">
					<p><strong>Model<br />
</strong>The model layer represents buisness logic. This could be communicating with a cloud service, database or even just implementing some kind of algorithm or talking to hardware.</p>
<p>The model can talk to the ViewModel via events. Equally the ViewModel can pass data or call methods in the model layer.</p>
<p><strong>ViewModel<br />
</strong>The viewmodel can be thought of as an adaptor that sits between the View (UI) and the buissness logic. It can call methods or listen to events in the model to update its state. The viewmodel can update the UI by raising a special event called <em>INotifyPropertyChanged</em> this event is listened to by the View and when its fired the UI knows to checks for updates in the ViewModel and the update the display.</p>
<p><strong>View<br />
</strong>The View is a presentation layer that describes how to render the data in the ViewModel. It is loosely coupled to the ViewModel. The View uses <em>DataBinding</em><em> </em>to display properties on the ViewModel and <em>Commands</em> to signal events back to the ViewModel.<strong><br />
</strong></p>
<p>Ok so we have learned a few terms here which may not be so clear if this is the first time you have come across them. I feel its best to learn through doing so lets get started with something practical.</p>
<p>In this tutorial we will build a very basic application that demonstrates each of these layers covering the following:</p>
<blockquote><p>Updating the UI from the ViewModel using <em>DataBinding</em></p>
<p>Updating the ViewModel from the UI using <em>DataBinding</em></p>
<p>Calling code in the Model from the ViewModel causing updates in the UI</p>
<p>Events signaling change in the Model to update the ViewModel and as a result the UI</p></blockquote>
<p>Start by creating a new Avalonia MVVM application and giving it a name of your choosing.</p>
<p>&nbsp;</p>
				</div>
			</div> <!-- .et_pb_text -->
			</div> <!-- .et_pb_column -->
				
				
			</div> <!-- .et_pb_row -->
				
				
			</div> <!-- .et_pb_section -->
]]></content:encoded>
			</item>
		<item>
		<title>Hello World Avalonia MVVM</title>
		<link>/2018/03/02/hello-world-avalonia-mvvm/</link>
		<pubDate>Fri, 02 Mar 2018 15:19:58 +0000</pubDate>
		<dc:creator><![CDATA[Daniel Walmsley]]></dc:creator>
				<category><![CDATA[Uncategorised]]></category>

		<guid isPermaLink="false">/?p=237</guid>
		<description><![CDATA[]]></description>
				<content:encoded><![CDATA[<p><div class="et_pb_section et_pb_section_1 et_section_regular">
				
				
				
				
					<div class=" et_pb_row et_pb_row_2">
				<div class="et_pb_column et_pb_column_4_4  et_pb_column_2 et_pb_css_mix_blend_mode_passthrough et-last-child">
				
				
				<div class="et_pb_text et_pb_module et_pb_bg_layout_light et_pb_text_align_left  et_pb_text_2">
				
				
				<div class="et_pb_text_inner">
					<blockquote><p>In this tutorial we will learn the following:</p>
<ol>
<li>How to create a new Avalonia UI project using Avalon Studio.</li>
<li>How the basic Avalonia project is layed out</li>
<li>How to compile and run our project.</li>
</ol>
<p>Prerequisites:</p>
<p>We assume you have already installed and are running Avalon Studio on your machine.</p></blockquote>
<p>Begin by clicking on File -&gt; New Solution.</p>
				</div>
			</div> <!-- .et_pb_text -->
			</div> <!-- .et_pb_column -->
				
				
			</div> <!-- .et_pb_row --><div class=" et_pb_row et_pb_row_3">
				<div class="et_pb_column et_pb_column_4_4  et_pb_column_3 et_pb_css_mix_blend_mode_passthrough et-last-child">
				
				
				<div class="et_pb_module et_pb_image et-waypoint et_animated et_pb_image_1 et_always_center_on_mobile et_pb_image_sticky">
				
				
				<span class="et_pb_image_wrap"><img src="/wp-content/uploads/2018/03/new-solution.png" alt="" /></span>
			</div>
			</div> <!-- .et_pb_column -->
				
				
			</div> <!-- .et_pb_row --><div class=" et_pb_row et_pb_row_4">
				<div class="et_pb_column et_pb_column_4_4  et_pb_column_4 et_pb_css_mix_blend_mode_passthrough et-last-child">
				
				
				<div class="et_pb_text et_pb_module et_pb_bg_layout_light et_pb_text_align_left  et_pb_text_3">
				
				
				<div class="et_pb_text_inner">
					<p>This will bring up the project template screen.</p>
				</div>
			</div> <!-- .et_pb_text -->
			</div> <!-- .et_pb_column -->
				
				
			</div> <!-- .et_pb_row --><div class=" et_pb_row et_pb_row_5">
				<div class="et_pb_column et_pb_column_4_4  et_pb_column_5 et_pb_css_mix_blend_mode_passthrough et-last-child">
				
				
				<div class="et_pb_module et_pb_image et-waypoint et_animated et_pb_image_2 et_always_center_on_mobile et_pb_image_sticky">
				
				
				<span class="et_pb_image_wrap"><img src="/wp-content/uploads/2018/03/2018-03-02-1.png" alt="" /></span>
			</div>
			</div> <!-- .et_pb_column -->
				
				
			</div> <!-- .et_pb_row --><div class=" et_pb_row et_pb_row_6">
				<div class="et_pb_column et_pb_column_4_4  et_pb_column_6 et_pb_column_empty et_pb_css_mix_blend_mode_passthrough et-last-child">
				
				
				
			</div> <!-- .et_pb_column -->
				
				
			</div> <!-- .et_pb_row --><div class=" et_pb_row et_pb_row_7">
				<div class="et_pb_column et_pb_column_4_4  et_pb_column_7 et_pb_css_mix_blend_mode_passthrough et-last-child">
				
				
				<div class="et_pb_text et_pb_module et_pb_bg_layout_light et_pb_text_align_left  et_pb_text_4">
				
				
				<div class="et_pb_text_inner">
					<p>Select C# from the list of languages on the left. The select the Avalonia NETCore MVVM App template from the list in the middle of the screen.</p>
<p>You can then change the name to something more suitable like <strong>`MyAvaloniaProject`</strong> then click OK.</p>
<p>It may take a few seconds for the project to be created and loaded, upon which you will see something like the following.</p>
				</div>
			</div> <!-- .et_pb_text --><div class="et_pb_module et_pb_image et-waypoint et_animated et_pb_image_3 et_always_center_on_mobile et_pb_image_sticky">
				
				
				<span class="et_pb_image_wrap"><img src="/wp-content/uploads/2018/03/avalonia-template.png" alt="" /></span>
			</div><div class="et_pb_text et_pb_module et_pb_bg_layout_light et_pb_text_align_left  et_pb_text_5">
				
				
				<div class="et_pb_text_inner">
					<p>If you look to the right of the screen we have the solution explorer. This shows the structure and files within the solution.</p>
<p>The Avalonia UI template automatically creates several files and folders within the project. This constitutes a recommended layout for Avalonia UI projects.</p>
<p>The following folders exist:</p>
<ul>
<li>Assets<br />
This folder is intended to store images, icons and other media content for your application. Any file inside this folder will be embedded withing the compiled executable.</li>
<li>Models<br />
This folder should contain all the code that forms the buisness logic of the application. That mean non-ui logic. We will go into this in more detail in upcoming tutorials.</li>
<li>ViewModels<br />
This folder will contain all the ViewModel classes that describe all the UI logic of each view. There is <em>usually</em> a one to one relationship between the number of views and view models. Again we shall cover this topic in more details in upcoming tutorials.</li>
<li>Views<br />
This folder will contain all the UI (Xaml) code that describes the various Windows, Pages and Controls that the UI consists of.</li>
</ul>
<p>In the root of the project we have the following necessary files:</p>
<ul>
<li>App.xaml<br />
This file describes the global styles and resources of the application. Usually styles are not directly places in this file, but rather referenced from it.</li>
<li>App.xaml.cs<br />
This is simply a C# class used to load the App.xaml code.</li>
<li>MyAvaloniaProject.csproj<br />
This is the project file, it can be edited to add nuget packages, project references and more.</li>
<li>nuget.config<br />
This is a file that tells nuget where it can download packages from other than the default nuget.org. Since Avalonia is still in BETA it will allow you access to Avalonias nightly builds incase you need them.</li>
<li>Program.cs<br />
This contains the main entry point of the application.</li>
<li>ViewLocator.cs<br />
This is a simple utility class which locates views based on the use of a paricular viewmodel. We will cover this in a future tutorial.</li>
</ul>
<p>First thing to do is to view the UI in Avalon Studio&#8217;s XAML previewer. In order for this to work the project needs to have been built. To do this press the build button <img class="wp-image-247 alignnone size-full" src="/wp-content/uploads/2018/03/build-button.png" alt="" width="20" height="23" /> or F6 on the keyboard.</p>
<p>You will then see the build status in the console at the bottom of the screen. Provided everything works you will see the following output.</p>
<p>&nbsp;</p>
<blockquote><p><span style="font-family: Ubuntu; font-weight: normal;">Creating: 4 build nodes.</span></p>
<p><span style="font-family: Ubuntu; font-weight: normal;">[MyAvaloniaProject] Node = 1</span><br />
<span style="font-family: Ubuntu; font-weight: normal;">MyAvaloniaProject -&gt; C:\Users\dan\AvalonStudio\Projects\MyAvaloniaProject\MyAvaloniaProject\bin\Debug\netcoreapp2.0\MyAvaloniaProject.dll</span><br />
<span style="font-family: Ubuntu; font-weight: normal;">Build Successful &#8211; 00:00:03.120970</span></p></blockquote>
<p><span style="font-family: Ubuntu; font-weight: normal;">Now click on the MainWindow.xaml file to open the Xaml Editor.</span></p>
<p>&nbsp;</p>
				</div>
			</div> <!-- .et_pb_text --><div class="et_pb_module et_pb_image et-waypoint et_animated et_pb_image_4 et_always_center_on_mobile et_pb_image_sticky">
				
				
				<span class="et_pb_image_wrap"><img src="/wp-content/uploads/2018/03/xaml-editor.png" alt="" /></span>
			</div><div class="et_pb_text et_pb_module et_pb_bg_layout_light et_pb_text_align_left  et_pb_text_6">
				
				
				<div class="et_pb_text_inner">
					<p>The Xaml editor shows you the Xaml code at the bottom and the preview of how the Xaml will render at the top.</p>
<p>Now we can run the program under the debugger by pressing F5 on the keyboard or the Debug button <img class="wp-image-249 alignnone size-full" src="/wp-content/uploads/2018/03/debug-button.png" alt="" width="18" height="18" /></p>
				</div>
			</div> <!-- .et_pb_text --><div class="et_pb_module et_pb_image et-waypoint et_animated et_pb_image_5 et_always_center_on_mobile et_pb_image_sticky">
				
				
				<span class="et_pb_image_wrap"><img src="/wp-content/uploads/2018/03/HelloWorldAvaloniaApp.png" alt="" /></span>
			</div><div class="et_pb_text et_pb_module et_pb_bg_layout_light et_pb_text_align_left  et_pb_text_7">
				
				
				<div class="et_pb_text_inner">
					<p>We have now created a project compiled and run it. Here is a video that demonstrates the process.</p>
				</div>
			</div> <!-- .et_pb_text --><div class="et_pb_text et_pb_module et_pb_bg_layout_light et_pb_text_align_left  et_pb_text_8">
				
				
				<div class="et_pb_text_inner">
					
				</div>
			</div> <!-- .et_pb_text -->
			</div> <!-- .et_pb_column -->
				
				
			</div> <!-- .et_pb_row -->
				
				
			</div> <!-- .et_pb_section --><div class="et_pb_section et_pb_section_2 et_section_regular">
				
				
				
				
					<div class=" et_pb_row et_pb_row_8">
				<div class="et_pb_column et_pb_column_4_4  et_pb_column_8 et_pb_css_mix_blend_mode_passthrough et-last-child">
				
				
				<div class="et_pb_code et_pb_module  et_pb_code_0">
				
				
				<div class="et_pb_code_inner">
					<iframe width="560" height="315" src="https://www.youtube.com/embed/ff-ko9QOC0M" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
				</div> <!-- .et_pb_code_inner -->
			</div> <!-- .et_pb_code -->
			</div> <!-- .et_pb_column -->
				
				
			</div> <!-- .et_pb_row -->
				
				
			</div> <!-- .et_pb_section --></p>
]]></content:encoded>
			</item>
	</channel>
</rss>
